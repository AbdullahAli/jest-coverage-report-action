_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[14],{RXFr:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/migrate",function(){return n("dAY+")}])},"dAY+":function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return p})),n.d(t,"default",(function(){return u}));var r=n("rePB"),o=n("Ff2n"),a=(n("q1tI"),n("7ljp")),s=n("5qGs");function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){Object(r.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p={title:"Upgrading to v2",description:"A complete guide how to migrate from version 1.x to version 2.x"},l={meta:p},b=function(e){var t=e.children,n=Object(o.a)(e,["children"]);return Object(a.b)(s.a,c({meta:p},n),t)};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)(b,c(c(c({},l),n),{},{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",c({},{id:"upgrading-to-v2"}),"Upgrading to v2"),Object(a.b)("p",null,"Jest Coverage Report action v2 resolves the architectural issues of the first version, which prevented the addition of new functionality. In addition, second version's behavior is more predictable and understandable."),Object(a.b)("p",null,"Actually, you need to update only your workflow's configuration."),Object(a.b)("h2",c({},{id:"upgrade-steps"}),"Upgrade steps"),Object(a.b)("p",null,"A few steps need to be completed to fully migrate from ",Object(a.b)("inlineCode",{parentName:"p"},"v1")," to ",Object(a.b)("inlineCode",{parentName:"p"},"v2"),". Don't worry if your action unexpectedly fails - this guide will help you to fix all errors. If after completing this guide your action still failing, please create an ",Object(a.b)("a",c({parentName:"p"},{href:"https://www.github.com/ArtiomTr/jest-coverage-report-action/issues"}),"issue")," - our community is ready to help you!"),Object(a.b)("h3",c({},{id:"1-different-inputs-casing"}),"1. Different inputs casing"),Object(a.b)("p",null,"Firstly, rename all inputs from ",Object(a.b)("inlineCode",{parentName:"p"},"camelCase")," to ",Object(a.b)("inlineCode",{parentName:"p"},"kebab-case"),". Example:"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-yaml",metastring:"diff",diff:!0}),"name: Coverage report\non:\n    pull_request:\n        branches:\n            - master\njobs:\n    coverage:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v2\n-           - uses: artiomtr/jest-coverage-report-action@v1.3\n+           - uses: artiomtr/jest-coverage-report-action@v2\n              with:\n-                  github_token: ${{ secrets.GITHUB_TOKEN }}\n+                  github-token: ${{ secrets.GITHUB_TOKEN }}\n                   threshold: 80\n-                  test_script: npm run test:coverage\n+                  test-script: npm run test:coverage\n-                  working_directory: some_dir\n+                  working-directory: some_dir\n")),Object(a.b)("h3",c({},{id:"2-new-test-script-format"}),"2. New test script format"),Object(a.b)("p",null,"In ",Object(a.b)("inlineCode",{parentName:"p"},"v2")," version ",Object(a.b)("inlineCode",{parentName:"p"},"jest-coverage-report-action")," uses different format to extract coverage data. If you want to have custom testing script, change it as this example shows:"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-yaml",metastring:"diff",diff:!0}),'with:\n    github-token: ${{ secrets.GITHUB_TOKEN }}\n-   test_script: npx jest --silent --ci --coverage --coverageReporters="text" --coverageReporters="text-summary"\n+   test-script: npx jest --silent --ci --coverage --testLocationInResults --json --outputFile="report.json"\n')),Object(a.b)("p",null,"Or, if you use testing script from your ",Object(a.b)("inlineCode",{parentName:"p"},"package.json")," file:"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-json",metastring:"diff",diff:!0}),'{\n    "scripts": {\n-       "test:coverage": "jest --silent --ci --coverage --coverageReporters=\\"text\\" --coverageReporters=\\"text-summary\\""\n+       "test:coverage": "jest --silent --ci --coverage --testLocationInResults --json --outputFile=\\"report.json\\""\n    }\n}\n')),Object(a.b)("h3",c({},{id:"3-new-features"}),"3. New features"),Object(a.b)("p",null,"In ",Object(a.b)("inlineCode",{parentName:"p"},"v2")," new feature was released - ",Object(a.b)("inlineCode",{parentName:"p"},"annotations"),". To disable them, simply specify ",Object(a.b)("inlineCode",{parentName:"p"},"annotations: none"),". Example:"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-yaml"}),"with:\n    github-token: ${{ secrets.GITHUB_TOKEN }}\n    annotations: none\n")),Object(a.b)("p",null,"Or, if you want only coverage annotations:"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-yaml"}),"with:\n    github-token: ${{ secrets.GITHUB_TOKEN }}\n    annotations: coverage\n")),Object(a.b)("p",null,"And, if you want annotate only failed tests"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-yaml"}),"with:\n    github-token: ${{ secrets.GITHUB_TOKEN }}\n    annotations: failed-tests\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"That's it! Welcome to ",Object(a.b)("inlineCode",{parentName:"strong"},"v2")," \ud83c\udf89")))}u.isMDXComponent=!0}},[["RXFr",1,2,3,6,0,4,5,7,9]]]);